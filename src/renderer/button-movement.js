document.addEventListener('DOMContentLoaded', () => {
    const welcomeTitle = document.getElementById('welcome-title');
    let clickCount = 0;
    let clickCountGlobal = 0;
    let isEscapeModeActive = false;
    let clones = [];
    let mouseX = 0, mouseY = 0;

    // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    const clickSound = new Audio('click-sound.mp3');
    const activateSound = new Audio('activate.mp3');
    const deactivateSound = new Audio('deactivate.mp3');
    const WHATSound = new Audio('WHAT.mp3');

    document.addEventListener('mousemove', (e) => {
        mouseX = e.clientX;
        mouseY = e.clientY;
    });

    // –§—É–Ω–∫—Ü–∏—è —Ç—Ä—è—Å–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
    function shakeElement(element) {
        element.style.animation = 'none';
        element.offsetHeight; // —Ç—Ä–∏–≥–≥–µ—Ä reflow
        element.style.animation = 'shake 0.4s cubic-bezier(.36,.07,.19,.97)';
    }

    // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∞–Ω–∏–º–∞—Ü–∏—é —Ç—Ä—è—Å–∫–∏ –Ω–∞ –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω—É—é
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    function fireConfettiCannon() {
        const end = Date.now() + 1000; // –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞

        (function frame() {
            confetti({
                particleCount: 2,
                angle: 60,
                spread: 55,
                origin: { x: 0, y: 0.8 }
            });
            confetti({
                particleCount: 2,
                angle: 120,
                spread: 55,
                origin: { x: 1, y: 0.8 }
            });

            if (Date.now() < end) {
                requestAnimationFrame(frame);
            }
        }());
    }

    function showGiantEmoji() {
        const emoji = document.createElement('div');
        emoji.textContent = 'üò†';
        emoji.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0);
            font-size: 150px;
            z-index: 9999;
            opacity: 0;
            transition: all 1s cubic-bezier(0.34, 1.56, 0.64, 1);
            pointer-events: none;
            animation: none;
            transform-origin: center center;
        `;
        document.body.appendChild(emoji);

        // –ü–æ—è–≤–ª–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        setTimeout(() => {
            emoji.style.transform = 'translate(-50%, -50%) scale(1)';
            emoji.style.opacity = '1';
            emoji.style.animation = 'shakeEmoji 2s ease-in-out infinite';
        }, 100);

        // –ò—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
        setTimeout(() => {
            emoji.style.transform = 'translate(-50%, -50%) scale(2)';
            emoji.style.opacity = '0';
            setTimeout(() => emoji.remove(), 1000);
        }, 5000);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —ç–º–æ–¥–∑–∏
    const emojiStyle = document.createElement('style');
    emojiStyle.textContent = `
        @keyframes shakeEmoji {
            0%, 100% { 
                transform: translate(-50%, -50%) rotate(0deg) scale(1); 
            }
            10% { 
                transform: translate(-52%, -50%) rotate(-5deg) scale(1.1); 
            }
            20% { 
                transform: translate(-48%, -50%) rotate(5deg) scale(0.9); 
            }
            30% { 
                transform: translate(-50%, -52%) rotate(0deg) scale(1.1); 
            }
            40% { 
                transform: translate(-50%, -48%) rotate(3deg) scale(0.9); 
            }
            50% { 
                transform: translate(-52%, -50%) rotate(-3deg) scale(1.1); 
            }
            60% { 
                transform: translate(-48%, -52%) rotate(2deg) scale(0.9); 
            }
            70% { 
                transform: translate(-50%, -48%) rotate(-2deg) scale(1.1); 
            }
            80% { 
                transform: translate(-52%, -50%) rotate(1deg) scale(0.9); 
            }
            90% { 
                transform: translate(-48%, -50%) rotate(-1deg) scale(1); 
            }
        }
    `;
    document.head.appendChild(emojiStyle);

    welcomeTitle.onclick = async (event) => {
        event.stopPropagation();
        shakeElement(welcomeTitle);
        
        try {
            clickSound.currentTime = 0;
            await clickSound.play().catch(console.error);
        } catch(e) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ –∑–≤—É–∫–æ–º:', e);
        }

        clickCount++;
        clickCountGlobal++;
        console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤:', clickCount);
        if (clickCountGlobal >= 60) {
            clickCountGlobal = 0;
            WHATSound.play().catch(console.error);
            showGiantEmoji();
        
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç
            confetti({
                particleCount: 150,
                spread: 180,
                origin: { y: 0.5 },
                gravity: 0.8,
                scalar: 2,
                shapes: ['circle', 'square'],
                colors: ['#FF0000', '#8B0000', '#DC143C', '#B22222'] // –û—Ç—Ç–µ–Ω–∫–∏ –∫—Ä–∞—Å–Ω–æ–≥–æ
            });
        
        
        } else {
            if (clickCount >= 10) {
                clickCount = 0; // –°–±—Ä–æ—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                if (!isEscapeModeActive) {
                    console.log('–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –ø–æ–±–µ–≥–∞');
                    activateSound.play().catch(console.error);
                    fireConfettiCannon();
                    activateEscapeMode();
                } else {
                    console.log('–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –ø–æ–±–µ–≥–∞');
                    deactivateSound.play().catch(console.error);
                    deactivateEscapeMode();
                }
            }
        }
    };

    function activateEscapeMode() {
        isEscapeModeActive = true;
        const elements = document.querySelectorAll('label, button, input, #ram-display, span');
        
        elements.forEach(element => {
            if (element.closest('.window-controls')) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º

            const rect = element.getBoundingClientRect();
            const computedStyle = window.getComputedStyle(element);
            
            const clone = element.cloneNode(true);
            document.body.appendChild(clone);

            // –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏ –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            Object.values(computedStyle).forEach(property => {
                try {
                    clone.style[property] = computedStyle[property];
                } catch (e) {}
            });

            clone.style.position = 'fixed';
            clone.style.left = rect.left + 'px';
            clone.style.top = rect.top + 'px';
            clone.style.width = rect.width + 'px';
            clone.style.height = rect.height + 'px';
            clone.style.margin = '0';
            clone.style.zIndex = '1000';
            clone.style.pointerEvents = 'none';

            element.style.opacity = '0';
            element.style.pointerEvents = 'none';

            const state = {
                x: rect.left,
                y: rect.top,
                speedX: 0,
                speedY: 0,
                element: clone,
                original: element,
                rect: rect
            };

            clones.push(state);
        });

        requestAnimationFrame(updateAllElements);
    }

    function deactivateEscapeMode() {
        isEscapeModeActive = false;
        clones.forEach(clone => {
            clone.element.remove();
            clone.original.style.opacity = '1';
            clone.original.style.pointerEvents = 'auto';
        });
        clones = [];
    }

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
    function updateAllElements() {
        if (!isEscapeModeActive) return;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —ç–∫—Ä–∞–Ω–∞
        const timestamp = performance.now();

        clones.forEach(state => {
            const deltaX = state.x + state.rect.width/2 - mouseX;
            const deltaY = state.y + state.rect.height/2 - mouseY;
            const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);

            if (distance < 150) {
                const force = Math.min(20, 150 / distance);
                const escapeX = (deltaX / distance) * force;
                const escapeY = (deltaY / distance) * force;
                state.speedX += escapeX;
                state.speedY += escapeY;
            }

            // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–∏–∑–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è
            state.speedX *= 0.96;
            state.speedY *= 0.96;

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
            const maxSpeed = 30;
            const currentSpeed = Math.sqrt(state.speedX * state.speedX + state.speedY * state.speedY);
            if (currentSpeed > maxSpeed) {
                const scale = maxSpeed / currentSpeed;
                state.speedX *= scale;
                state.speedY *= scale;
            }

            state.x += state.speedX;
            state.y += state.speedY;

            // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –æ—Ç—Å–∫–æ–∫–∏ –æ—Ç —Å—Ç–µ–Ω
            if (state.x < 0) {
                state.x = 0;
                state.speedX = Math.abs(state.speedX) * 0.7;
            } else if (state.x > window.innerWidth - state.rect.width) {
                state.x = window.innerWidth - state.rect.width;
                state.speedX = -Math.abs(state.speedX) * 0.7;
            }

            if (state.y < 0) {
                state.y = 0;
                state.speedY = Math.abs(state.speedY) * 0.7;
            } else if (state.y > window.innerHeight - state.rect.height) {
                state.y = window.innerHeight - state.rect.height;
                state.speedY = -Math.abs(state.speedY) * 0.7;
            }

            // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ transform
            state.element.style.transform = `translate3d(${state.x - state.rect.left}px, ${state.y - state.rect.top}px, 0)`;
        });

        requestAnimationFrame(updateAllElements);
    }
});